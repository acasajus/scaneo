package main

const (
	scansText = `{{define "scans"}}// DON'T EDIT *** generated by scaneo *** DON'T EDIT //

package {{.PackageName}}

import "database/sql"

{{range .Tokens -}}
func (o *{{.Name}}) {{visible "d"}}bScanRow(r *sql.Row) error {
	return r.Scan({{range .Fields}}&o.{{.Name}},{{end}})
}

func (o {{.Name}}) {{visible "d"}}bAllFields{{title .Name}}(i *{{.Name}}) []interface{} {
	ar := make([]interface{},{{len .Fields}})
	{{range $i, $v := .Fields -}}
	ar[{{$i}}] = i.{{$v.Name}}
	{{end -}}
	return ar
}

func (o {{.Name}}) {{visible "d"}}bPKFields{{title .Name}}(i *{{.Name}}) []interface{} {
	ar := make([]interface{},{{len .PKFields}})
	{{range $i, $v := .PKFields -}}
	ar[{{$i}}] = i.{{$v.Name}}
	{{end -}}
	return ar
}

func (o {{.Name}}) {{visible "d"}}bInsert(tx *sql.Tx) (sql.Result,error) {
	return tx.Exec("INSERT INTO \"{{.Name}}\" "+{{visible "i"}}nsert{{title .Name}}Fields+" VALUES "+{{visible "i"}}nsert{{title .Name}}Binds{{range .Fields}},o.{{.Name}}{{end}})
}

func (o {{.Name}}) {{visible "d"}}bUpdate(tx *sql.Tx) (sql.Result,error) {
	return tx.Exec("UPDATE \"{{.Name}}\" SET "+{{visible "u"}}pdate{{title .Name}}Fields+" WHERE "+{{visible "f"}}ind{{title .Name}}Condition{{range .Fields}},o.{{.Name}}{{end}})
}

func (o *{{.Name}}) {{visible "d"}}bFind(tx *sql.Tx) (error) {
	r := tx.QueryRow( "SELECT "+{{visible "s"}}elect{{title .Name}}Fields+" FROM \"{{.Name}}\" WHERE "+{{visible "f"}}ind{{title .Name}}Condition{{range .PKFields}},o.{{.Name}}{{end}})
	return o.{{visible "d"}}bScanRow(r)
}

func {{visible "s"}}can{{title .Name}}s(rs *sql.Rows) ([]*{{.Name}}, error) {
	structs := make([]*{{.Name}}, 0, 16)
	var err error
	for rs.Next() {
		var s {{.Name}}
		if err = rs.Scan({{range .Fields}}
			&s.{{.Name}},
		{{- end}}
		); err != nil {
			return nil, err
		}
		structs = append(structs, &s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

{{$fLen := len .Fields -}}
{{$typeName := .Name -}}
const (
	{{visible "i"}}nsert{{title .Name}}Fields = "({{range $i, $v := .Fields}}{{if $i}},{{end}}{{$v.Name}}{{end}})"
	{{visible "i"}}nsert{{title .Name}}Binds = "({{range $i, $v := .Fields}}{{if $i}},{{end}}${{inc $i}}{{end}})"
	{{visible "u"}}pdate{{title .Name}}Fields = "{{range $i, $v := .NonPKFields }}{{ if $i }},{{end}}{{$v.Name}}=${{inc $v.Index}}{{end}}"
	{{visible "f"}}ind{{title .Name}}Condition = "{{range $i, $v := .PKFields }}{{ if $i }} AND {{end}}{{$v.Name}}=${{inc $v.Index}}{{end}}"
	{{visible "s"}}elect{{title .Name}}Fields = "{{range $i, $v := .Fields}}{{if $i}},{{end}}{{$v.Name}}{{end}}"
	{{visible "s"}}elect{{title .Name}}FullFields = "{{range $i, $v := .Fields}}{{if $i}},{{end}}{{title $typeName}}.{{$v.Name}}{{end}}"
)

{{end -}}
{{end -}}`
)
